#! /usr/bin/env python3

import sys
import argparse
import binascii
from git import Repo
from distutils.version import StrictVersion

parser = argparse.ArgumentParser(description='Create next tag name')
parser.add_argument('repo', metavar='repo', type=str,
                   help='Repository path')
parser.add_argument('commit', metavar='commit', type=str,
                   help='Commit for new tag')

args = parser.parse_args()

def newMajorTag(tag):
    tagparts = tag.split('.')
    return '%i.%i.%i' % (int(tagparts[0]), int(tagparts[1])+1, 0)

def newMinorTag(tag):
    tagparts = tag.split('.')
    return '%i.%i.%i' % (int(tagparts[0]), int(tagparts[1]), int(tagparts[2])+1)

repo = Repo(args.repo)
repo.remote().pull()
ui = repo.git
tags = []
taglist = ui.ls_remote(args.repo, tags=True)
for tagitem in taglist.splitlines():
    tagparts = tagitem.split()
    if '{}' not in tagparts[1]:
        tags.append(tagparts[1].split('/')[2])

tags.sort(key=StrictVersion)

actualcommit = repo.commit(args.commit).binsha

for tag in repo.tags:
    if tag.tag.object.binsha == actualcommit:
        print("Commit already tagged as %s" % tag.name)
        sys.exit(1)

latesttag = tags[-1]

majortag = newMajorTag(latesttag)
minortag = newMinorTag(latesttag)

latesttag = repo.commit(latesttag)
commit = repo.commit(args.commit)

ismajor = False
migrationpath = '/migrations/'

for diff in latesttag.diff(commit):
    if migrationpath in diff.a_path or migrationpath in diff.b_path:
        ismajor = True
        break

tagname = minortag

if ismajor:
    tagname = majortag

repo.create_tag(tagname, ref=args.commit,
                                      message="Tagged %s automatically" % tagname )
print("Created tag %s" % tagname)
info = repo.remote().push(tags=True)
print(info.summary)